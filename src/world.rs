use geo;
use geo::{ Dir, Pos };
use geo::Dir::*;

use std::num::FromPrimitive;

#[derive(Copy, Clone)]
pub struct Tile {
    pub kind: TileKind
}

impl Tile {
    pub fn is_walkable(&self) -> bool {
        match self.kind {
            TileKind::Wall | TileKind::DoorClosed => false,
            _ => true
        }
    }

    pub fn is_translucent(&self) -> bool {
        self.is_walkable()
    }
}

#[derive(PartialEq, Show, FromPrimitive, Clone, Copy)]
pub enum TileKind {
    Floor       = ' ' as int,
    Wall        = '#' as int,
    DoorClosed  = '+' as int,
    DoorOpen    = ',' as int,
    StairsUp    = '<' as int,
    StairsDown  = '>' as int
}

impl TileKind {
    fn from_char(stile: char) -> TileKind {
        match FromPrimitive::from_int(stile as int) {
            Some(tile) => tile,
            None       => TileKind::Floor
        }
    }

    pub fn to_char(&self) -> char {
        (*self).clone() as int as u8 as char
    }
}

pub struct World {
    pub max_x: uint,
    pub max_y: uint,
    pub map: Vec<Vec<Tile>>
}

const DEMO_MAP : [&'static str; 51] = [
    "#################################################################################",
    "#######################      ##################################       ###########",
    "#####################    #     ############################     ##### ###########",
    "######################  ###        #################         ######## ###########",
    "##################      #####             ##########         #######  ######   ##",
    "################       ########    ###### ##########         ###### #######     #",
    "###############      #################### ############## ######      ######     #",
    "################    ######                  ############ ######                 #",
    "########   #######  ######   #     #     #  ############  #####      ############",
    "########   ######      ###                  ############  #######################",
    "########                                                                #########",
    "####       ######      ###   #     #     #  #####################################",
    "#### ###   ########## ####                  ####    ######## ## ### ## ##########",
    "#### ###   ##########   ###########,############    ######             ##########",
    "#### ##################   #####          #######    ######             ##########",
    "#### ###             #### #####          ######## ########             ##########",
    "####           #     ####                +                             ##########",
    "########       #     #### #####          ######################## ###############",
    "########       #####      ##########,############################ ###############",
    "#################################### #########################    ###############",
    "#################################### ######################### ##################",
    "#################################### #########################        ###########",
    "#################################### #########################        ###########",
    "####################################        #####################################",
    "#################################### ###  #######################################",
    "#################################### ###  #######################################",
    "######################               #           ################################",
    "#################################### ####                   #####################",
    "#################################### ####        ########## #####################",
    "#################################### ###################### #####################",
    "###################################   ##################### #####################",
    "#                                     ###############       #####################",
    "## ################################ ################# ###########################",
    "## ################################ ################# ###########################",
    "## ###########################      #################         ###################",
    "## ########################### ############################## ###################",
    "## ########################### #############################       ##############",
    "## #####         ############# ##############################      ##############",
    "## ##  # # # # # #############      ##########################    ###############",
    "##               ################## ###########################  ################",
    "#####  # # # # # ################## ############################ ################",
    "########         ################## ############################    #############",
    "################################### ##########      ############### #############",
    "###########################         ########                        #############",
    "########################### ##################      #############################",
    "########################### #######                 #############################",
    "########################### ####### #############################################",
    "########################### ####### #############################################",
    "#######################     ##         ##########################################",
    "###########################            ##########################################",
    "#################################################################################",
];

impl World {
    pub fn new() -> World {
        let mut map = Vec::new();

        for sline in DEMO_MAP.iter() {
            let mut line = Vec::new();
            for stile in sline.chars() {
                let kind = TileKind::from_char(stile);
                let tile = Tile { kind: kind };
                line.push(tile);
            }
            map.push(line);
        }
        World { max_x: 80u, max_y: 50u, map: map }
    }

    /// return a tile a x, y of the map
    pub fn at(&self, pos: Pos) -> &Tile {
        let Pos(x, y) = pos;
        &self.map[y as uint][x as uint]
    }

    pub fn set(&mut self, pos: Pos, kind: TileKind) {
        let Pos(x, y) = pos;
        self.map[y as uint][x as uint].kind = kind
    }

    pub fn adjacent(&self, pos: Pos) -> Vec<(geo::Dir, TileKind)> {
        let dirs = [H, NW, N, NE, W, E, SW, S, SE];
        let mut ts = vec![];
        for dir in dirs.iter() {
            let destination = pos.dest(*dir);
            let tile_kind = self.at(destination).kind;

            match tile_kind {
                TileKind::Floor | TileKind::Wall => (),
                _ => ts.push((*dir, tile_kind))
            }
        }
        ts
    }
}
