#[deriving(Copy)]
pub struct Point {
    pub x: uint,
    pub y: uint
}

#[deriving(PartialEq, Show, FromPrimitive, Clone, Copy)]
pub enum Tile {
    Floor       = ' ' as int,
    Wall        = '#' as int,
    DoorClosed  = '+' as int,
    DoorOpen    = ',' as int,
    StairsUp    = '<' as int,
    StairsDown  = '>' as int
}

impl Tile {
    fn from_char(stile: char) -> Tile {
        match FromPrimitive::from_int(stile as int) {
            Some(tile) => tile,
            None       => Tile::Floor
        }
    }

    pub fn to_char(&self) -> char {
        (*self).clone() as int as u8 as char
    }

    pub fn is_walkable(&self) -> bool {
        match *self {
            Tile::Wall | Tile::DoorClosed => false,
            _ => true
        }
    }
}

pub struct World {
    pub max_x: uint,
    pub max_y: uint,
    pub map: Vec<Vec<Tile>>
}

const DEMO_MAP : [&'static str, ..51] = [
    "#################################################################################",
    "#######################      ##################################       ###########",
    "#####################    #     ############################     ##### ###########",
    "######################  ###        #################         ######## ###########",
    "##################      #####             ##########         #######  ######   ##",
    "################       ########    ###### ##########         ###### #######     #",
    "###############      #################### ############## ######      ######     #",
    "################    ######                  ############ ######                 #",
    "########   #######  ######   #     #     #  ############  #####      ############",
    "########   ######      ###                  ############  #######################",
    "########                                                                #########",
    "####       ######      ###   #     #     #  #####################################",
    "#### ###   ########## ####                  ####    ######## ## ### ## ##########",
    "#### ###   ##########   ###########,############    ######             ##########",
    "#### ##################   #####          #######    ######             ##########",
    "#### ###             #### #####          ######## ########             ##########",
    "####           #     ####                +                             ##########",
    "########       #     #### #####          ######################## ###############",
    "########       #####      ##########,############################ ###############",
    "#################################### #########################    ###############",
    "#################################### ######################### ##################",
    "#################################### #########################        ###########",
    "#################################### #########################        ###########",
    "####################################        #####################################",
    "#################################### ###  #######################################",
    "#################################### ###  #######################################",
    "###################### ############# #           ################################",
    "#################################### ####                   #####################",
    "#################################### ####        ########## #####################",
    "#################################### ###################### #####################",
    "###################################   ##################### #####################",
    "#                                     ###############       #####################",
    "## ################################ ################# ###########################",
    "## ################################ ################# ###########################",
    "## ###########################      #################         ###################",
    "## ########################### ############################## ###################",
    "## ########################### #############################       ##############",
    "## #####         ############# ##############################      ##############",
    "## ##  # # # # # #############      ##########################    ###############",
    "##               ################## ###########################  ################",
    "#####  # # # # # ################## ############################ ################",
    "########         ################## ############################    #############",
    "################################### ##########      ############### #############",
    "###########################         ########                        #############",
    "########################### ##################      #############################",
    "########################### #######                 #############################",
    "########################### ####### #############################################",
    "########################### ####### #############################################",
    "#######################     ##         ##########################################",
    "###########################            ##########################################",
    "#################################################################################",
];

impl World {

    pub fn new() -> World {
        let map = DEMO_MAP.iter().
                        map(|sline| sline.chars().
                            map(|stile| Tile::from_char(stile)).collect()).collect();

        World { max_x: 80u, max_y: 50u, map: map }
    }

    /// return a tile a x, y of the map
    pub fn at(&self, x: uint, y: uint) -> &Tile {
        &self.map[y][x]
    }

    pub fn set(&mut self, x: uint, y: uint, tile: Tile) {
        self.map[y][x] = tile
    }
}

#[deriving(Copy, Show)]
pub enum Direction {
    NW, N, NE,
     W, H,  E,
    SW, S, SE
}

#[deriving(Copy, Show)]
pub enum Action {
    Walk(Direction),
    Rest,
    Open(Direction),
    Close(Direction),
    Auto
}
